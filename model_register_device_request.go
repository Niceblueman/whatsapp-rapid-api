/*
WhatsApp API

API for managing WhatsApp devices and interactions

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterDeviceRequest struct for RegisterDeviceRequest
type RegisterDeviceRequest struct {
	// Name of the device
	DeviceName *string `json:"deviceName,omitempty"`
	// Phone number with extension (e.g., +1234567890)
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// NewRegisterDeviceRequest instantiates a new RegisterDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterDeviceRequest() *RegisterDeviceRequest {
	this := RegisterDeviceRequest{}
	return &this
}

// NewRegisterDeviceRequestWithDefaults instantiates a new RegisterDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterDeviceRequestWithDefaults() *RegisterDeviceRequest {
	this := RegisterDeviceRequest{}
	return &this
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *RegisterDeviceRequest) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterDeviceRequest) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *RegisterDeviceRequest) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *RegisterDeviceRequest) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *RegisterDeviceRequest) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterDeviceRequest) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RegisterDeviceRequest) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *RegisterDeviceRequest) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

func (o RegisterDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceName != nil {
		toSerialize["deviceName"] = o.DeviceName
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterDeviceRequest struct {
	value *RegisterDeviceRequest
	isSet bool
}

func (v NullableRegisterDeviceRequest) Get() *RegisterDeviceRequest {
	return v.value
}

func (v *NullableRegisterDeviceRequest) Set(val *RegisterDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterDeviceRequest(val *RegisterDeviceRequest) *NullableRegisterDeviceRequest {
	return &NullableRegisterDeviceRequest{value: val, isSet: true}
}

func (v NullableRegisterDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


